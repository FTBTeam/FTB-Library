plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common
	dev
}

//loom {
//	forge {
//		mixinConfigs = [
//				/*"ftblibrary-forge.mixins.json", */
//				"ftblibrary-common.mixins.json"
//		]
//	}
//}

artifacts {
	dev(jar)
}

repositories {
	maven {
		url "https://maven.neoforged.net/releases/"
	}
	maven {
		name "ModMaven (JEI)"
		url "https://modmaven.dev/"
		content {
			includeGroup "mezz.jei"
		}
	}
}

dependencies {
	neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

	modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

//	modCompileOnly "me.shedaniel:RoughlyEnoughItems-plugin-compatibilities-forge:${rootProject.rei_plugin_compat_version}"
//	modCompileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-common-api:${rootProject.jei_version}")
//	modCompileOnlyApi("mezz.jei:jei-${rootProject.minecraft_version}-forge-api:${rootProject.jei_version}")
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rootProject.rei_version}"

	common(project(path: ":common", configuration: "dev")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

processResources {
	exclude '.cache'

	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version,
				"archversion": project.architectury_version,
				"neoforgeversion": project.neoforge_version,
				"neoforgeloaderversion": project.neoforge_loader_version,
				"mcversion": project.minecraft_version
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	setArchiveClassifier("dev-shadow")
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
	archiveClassifier.set null
	atAccessWideners.add('ftblibrary.accesswidener')
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	setArchiveClassifier("dev")
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id_forge
			releaseType = ftbPublishing.relType
			addGameVersion "Forge"
			addGameVersion rootProject.minecraft_version
			mainArtifact(remapJar.archiveFile)
			relations {
				requiredDependency 'architectury-api'
				optionalDependency 'jei'
				optionalDependency 'roughly-enough-items'
			}
			changelog = ENV.CHANGELOG  // expected to exist if ENV.CURSEFORGE does
			changelogType = 'markdown'
		}
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-${project.name}"
			version ftbPublishing.mavenVersion
			from components.java
		}
	}

	repositories {
		if (ftbPublishing.ftbToken) {
			maven {
				url ftbPublishing.ftbURL
				credentials {
					username = ftbPublishing.ftbUser
					password = ftbPublishing.ftbToken
				}
			}
		}

		if (ftbPublishing.sapsToken) {
			maven {
				url ftbPublishing.sapsURL
				credentials {
					username = ftbPublishing.sapsUser
					password = ftbPublishing.sapsToken
				}
			}
		}
	}
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
